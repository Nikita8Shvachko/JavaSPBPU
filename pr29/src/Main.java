//Практика #1: Пример интерфейса с неабстрактным и статическим методом
//
//В этом примере создадим интерфейс с одним неабстрактным методом (default метод) и одним статическим методом.
// Затем создадим класс, который реализует этот интерфейс, и продемонстрируем все способы вызова методов интерфейса.

// Интерфейс с default и статическим методом
/*
interface MyInterface {

    // Неабстрактный метод (default метод)
    default void defaultMethod() {
        System.out.println("Это default метод в интерфейсе");
    }

    // Статический метод
    static void staticMethod() {
        System.out.println("Это статический метод в интерфейсе");
    }
}

// Класс, реализующий интерфейс
class MyClass implements MyInterface {

    // Переопределение default метода (не обязательно)
    @Override
    public void defaultMethod() {
        System.out.println("Переопределенный default метод в классе");
    }
}

public class Main {
    public static void main(String[] args) {
        // Создание экземпляра класса
        MyClass obj = new MyClass();

        // Вызов переопределенного метода
        obj.defaultMethod(); // Переопределенный default метод в классе

        // Вызов статического метода через интерфейс
        MyInterface.staticMethod(); // Статический метод в интерфейсе
    }
}*/

//Вывод программы:
//
//Переопределенный default метод в классе
//Это статический метод в интерфейсе
//
//Объяснение:
//        •	Мы создали интерфейс MyInterface с методом defaultMethod и статическим методом staticMethod.
//	•	Класс MyClass реализует интерфейс и переопределяет defaultMethod.
//	•	Статический метод staticMethod вызывается через имя интерфейса (MyInterface.staticMethod()), так
//	как статические методы интерфейсов не могут быть переопределены.
//	•	Переопределенный метод defaultMethod вызывается через объект класса, который реализует интерфейс.
//
//        Практика #2: Когда два интерфейса имеют одинаковые неабстрактные методы
//
//Если класс реализует два интерфейса с одинаковыми default методами, компилятор не будет знать, какой метод
// использовать, и возникнет ошибка компиляции. Чтобы решить эту проблему, нужно явно переопределить метод в
// классе и указать, какой именно default метод должен быть использован.
//
//Пример:
/*
interface InterfaceA {
    // Неабстрактный метод в InterfaceA
    default void greet() {
        System.out.println("Привет из InterfaceA");
    }
}

interface InterfaceB {
    // Неабстрактный метод в InterfaceB
    default void greet() {
        System.out.println("Привет из InterfaceB");
    }
}

class MyClass implements InterfaceA, InterfaceB {

    // Явное переопределение метода greet() для разрешения конфликта
    @Override
    public void greet() {
        // Можно выбрать один из интерфейсов или предоставить свой собственный вариант
        System.out.println("Привет из MyClass!");
    }
}

public class Main {
    public static void main(String[] args) {
        MyClass obj = new MyClass();
        obj.greet(); // Вызов переопределенного метода
    }
}*/

//Вывод программы:
//
//Привет из MyClass!
//
//Объяснение:
//        •	В данном примере оба интерфейса InterfaceA и InterfaceB имеют метод greet(), помеченный как default.
//        •	Класс MyClass реализует оба интерфейса и должен явно переопределить метод greet(), чтобы разрешить конфликт.
//        •	Мы переопределяем метод greet() в классе MyClass, и теперь он вызывает тот вариант, который мы указали в переопределении.
//
//Если бы класс не переопределил этот метод, компилятор выбросил бы ошибку о конфликте между методами из двух интерфейсов.